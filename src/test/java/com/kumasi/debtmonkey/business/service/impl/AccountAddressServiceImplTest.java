/*
 * Created on 6 Sep 2016 ( Time 17:16:42 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.debtmonkey.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.kumasi.debtmonkey.model.AccountAddress;
import com.kumasi.debtmonkey.model.jpa.AccountAddressEntity;
import com.kumasi.debtmonkey.business.service.mapping.AccountAddressServiceMapper;
import com.kumasi.debtmonkey.persistence.services.jpa.AccountAddressPersistenceJPA;
import com.kumasi.debtmonkey.test.AccountAddressFactoryForTest;
import com.kumasi.debtmonkey.test.AccountAddressEntityFactoryForTest;
import com.kumasi.debtmonkey.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of AccountAddressService
 */
@RunWith(MockitoJUnitRunner.class)
public class AccountAddressServiceImplTest {

	@InjectMocks
	private AccountAddressServiceImpl accountAddressService;
	@Mock
	private AccountAddressPersistenceJPA accountAddressPersistenceJPA;
	@Mock
	private AccountAddressServiceMapper accountAddressServiceMapper;
	
	private AccountAddressFactoryForTest accountAddressFactoryForTest = new AccountAddressFactoryForTest();

	private AccountAddressEntityFactoryForTest accountAddressEntityFactoryForTest = new AccountAddressEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		AccountAddressEntity accountAddressEntity = accountAddressPersistenceJPA.load(id);
		
		AccountAddress accountAddress = accountAddressFactoryForTest.newAccountAddress();
		when(accountAddressServiceMapper.mapAccountAddressEntityToAccountAddress(accountAddressEntity)).thenReturn(accountAddress);

		// When
		AccountAddress accountAddressFound = accountAddressService.findById(id);

		// Then
		assertEquals(accountAddress.getId(),accountAddressFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<AccountAddressEntity> accountAddressEntitys = new ArrayList<AccountAddressEntity>();
		AccountAddressEntity accountAddressEntity1 = accountAddressEntityFactoryForTest.newAccountAddressEntity();
		accountAddressEntitys.add(accountAddressEntity1);
		AccountAddressEntity accountAddressEntity2 = accountAddressEntityFactoryForTest.newAccountAddressEntity();
		accountAddressEntitys.add(accountAddressEntity2);
		when(accountAddressPersistenceJPA.loadAll()).thenReturn(accountAddressEntitys);
		
		AccountAddress accountAddress1 = accountAddressFactoryForTest.newAccountAddress();
		when(accountAddressServiceMapper.mapAccountAddressEntityToAccountAddress(accountAddressEntity1)).thenReturn(accountAddress1);
		AccountAddress accountAddress2 = accountAddressFactoryForTest.newAccountAddress();
		when(accountAddressServiceMapper.mapAccountAddressEntityToAccountAddress(accountAddressEntity2)).thenReturn(accountAddress2);

		// When
		List<AccountAddress> accountAddresssFounds = accountAddressService.findAll();

		// Then
		assertTrue(accountAddress1 == accountAddresssFounds.get(0));
		assertTrue(accountAddress2 == accountAddresssFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		AccountAddress accountAddress = accountAddressFactoryForTest.newAccountAddress();

		AccountAddressEntity accountAddressEntity = accountAddressEntityFactoryForTest.newAccountAddressEntity();
		when(accountAddressPersistenceJPA.load(accountAddress.getId())).thenReturn(null);
		
		accountAddressEntity = new AccountAddressEntity();
		accountAddressServiceMapper.mapAccountAddressToAccountAddressEntity(accountAddress, accountAddressEntity);
		AccountAddressEntity accountAddressEntitySaved = accountAddressPersistenceJPA.save(accountAddressEntity);
		
		AccountAddress accountAddressSaved = accountAddressFactoryForTest.newAccountAddress();
		when(accountAddressServiceMapper.mapAccountAddressEntityToAccountAddress(accountAddressEntitySaved)).thenReturn(accountAddressSaved);

		// When
		AccountAddress accountAddressResult = accountAddressService.create(accountAddress);

		// Then
		assertTrue(accountAddressResult == accountAddressSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		AccountAddress accountAddress = accountAddressFactoryForTest.newAccountAddress();

		AccountAddressEntity accountAddressEntity = accountAddressEntityFactoryForTest.newAccountAddressEntity();
		when(accountAddressPersistenceJPA.load(accountAddress.getId())).thenReturn(accountAddressEntity);

		// When
		Exception exception = null;
		try {
			accountAddressService.create(accountAddress);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		AccountAddress accountAddress = accountAddressFactoryForTest.newAccountAddress();

		AccountAddressEntity accountAddressEntity = accountAddressEntityFactoryForTest.newAccountAddressEntity();
		when(accountAddressPersistenceJPA.load(accountAddress.getId())).thenReturn(accountAddressEntity);
		
		AccountAddressEntity accountAddressEntitySaved = accountAddressEntityFactoryForTest.newAccountAddressEntity();
		when(accountAddressPersistenceJPA.save(accountAddressEntity)).thenReturn(accountAddressEntitySaved);
		
		AccountAddress accountAddressSaved = accountAddressFactoryForTest.newAccountAddress();
		when(accountAddressServiceMapper.mapAccountAddressEntityToAccountAddress(accountAddressEntitySaved)).thenReturn(accountAddressSaved);

		// When
		AccountAddress accountAddressResult = accountAddressService.update(accountAddress);

		// Then
		verify(accountAddressServiceMapper).mapAccountAddressToAccountAddressEntity(accountAddress, accountAddressEntity);
		assertTrue(accountAddressResult == accountAddressSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		accountAddressService.delete(id);

		// Then
		verify(accountAddressPersistenceJPA).delete(id);
		
	}

}
