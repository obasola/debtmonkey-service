/*
 * Created on 11 Feb 2017 ( Time 18:00:27 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.debtmonkey.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.kumasi.debtmonkey.model.AccountAddress;
import com.kumasi.debtmonkey.model.jpa.AccountAddressEntity;
import com.kumasi.debtmonkey.model.jpa.AddressTypeEntity;
import com.kumasi.debtmonkey.model.jpa.AccountEntity;
import com.kumasi.debtmonkey.model.jpa.AccountTypeEntity;
import com.kumasi.debtmonkey.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class AccountAddressServiceMapperTest {

	private AccountAddressServiceMapper accountAddressServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		accountAddressServiceMapper = new AccountAddressServiceMapper();
		accountAddressServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'AccountAddressEntity' to 'AccountAddress'
	 * @param accountAddressEntity
	 */
	@Test
	public void testMapAccountAddressEntityToAccountAddress() {
		// Given
		AccountAddressEntity accountAddressEntity = new AccountAddressEntity();
		accountAddressEntity.setAddressLine1(mockValues.nextString(45));
		accountAddressEntity.setAddressLine2(mockValues.nextString(45));
		accountAddressEntity.setCity(mockValues.nextString(45));
		accountAddressEntity.setState(mockValues.nextString(45));
		accountAddressEntity.setZipcode(mockValues.nextString(5));
		accountAddressEntity.setAddressType(new AddressTypeEntity());
		accountAddressEntity.getAddressType().setId(mockValues.nextInteger());
		accountAddressEntity.setAccount(new AccountEntity());
		accountAddressEntity.getAccount().setId(mockValues.nextInteger());
		accountAddressEntity.setAccountType(new AccountTypeEntity());
		accountAddressEntity.getAccountType().setId(mockValues.nextInteger());
		
		// When
		AccountAddress accountAddress = accountAddressServiceMapper.mapAccountAddressEntityToAccountAddress(accountAddressEntity);
		
		// Then
		assertEquals(accountAddressEntity.getAddressLine1(), accountAddress.getAddressLine1());
		assertEquals(accountAddressEntity.getAddressLine2(), accountAddress.getAddressLine2());
		assertEquals(accountAddressEntity.getCity(), accountAddress.getCity());
		assertEquals(accountAddressEntity.getState(), accountAddress.getState());
		assertEquals(accountAddressEntity.getZipcode(), accountAddress.getZipcode());
		assertEquals(accountAddressEntity.getAddressType().getId(), accountAddress.getAddressTypeId());
		assertEquals(accountAddressEntity.getAccount().getId(), accountAddress.getAccountId());
		assertEquals(accountAddressEntity.getAccountType().getId(), accountAddress.getAccountTypeId());
	}
	
	/**
	 * Test : Mapping from 'AccountAddress' to 'AccountAddressEntity'
	 */
	@Test
	public void testMapAccountAddressToAccountAddressEntity() {
		// Given
		AccountAddress accountAddress = new AccountAddress();
		accountAddress.setAddressLine1(mockValues.nextString(45));
		accountAddress.setAddressLine2(mockValues.nextString(45));
		accountAddress.setCity(mockValues.nextString(45));
		accountAddress.setState(mockValues.nextString(45));
		accountAddress.setZipcode(mockValues.nextString(5));
		accountAddress.setAddressTypeId(mockValues.nextInteger());
		accountAddress.setAccountId(mockValues.nextInteger());
		accountAddress.setAccountTypeId(mockValues.nextInteger());

		AccountAddressEntity accountAddressEntity = new AccountAddressEntity();
		
		// When
		accountAddressServiceMapper.mapAccountAddressToAccountAddressEntity(accountAddress, accountAddressEntity);
		
		// Then
		assertEquals(accountAddress.getAddressLine1(), accountAddressEntity.getAddressLine1());
		assertEquals(accountAddress.getAddressLine2(), accountAddressEntity.getAddressLine2());
		assertEquals(accountAddress.getCity(), accountAddressEntity.getCity());
		assertEquals(accountAddress.getState(), accountAddressEntity.getState());
		assertEquals(accountAddress.getZipcode(), accountAddressEntity.getZipcode());
		assertEquals(accountAddress.getAddressTypeId(), accountAddressEntity.getAddressType().getId());
		assertEquals(accountAddress.getAccountId(), accountAddressEntity.getAccount().getId());
		assertEquals(accountAddress.getAccountTypeId(), accountAddressEntity.getAccountType().getId());
	}

}