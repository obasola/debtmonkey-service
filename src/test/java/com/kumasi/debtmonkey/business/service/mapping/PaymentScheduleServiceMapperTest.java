/*
 * Created on 11 Feb 2017 ( Time 18:00:31 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.debtmonkey.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.kumasi.debtmonkey.model.PaymentSchedule;
import com.kumasi.debtmonkey.model.jpa.PaymentScheduleEntity;
import com.kumasi.debtmonkey.model.jpa.AccountEntity;
import com.kumasi.debtmonkey.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class PaymentScheduleServiceMapperTest {

	private PaymentScheduleServiceMapper paymentScheduleServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		paymentScheduleServiceMapper = new PaymentScheduleServiceMapper();
		paymentScheduleServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'PaymentScheduleEntity' to 'PaymentSchedule'
	 * @param paymentScheduleEntity
	 */
	@Test
	public void testMapPaymentScheduleEntityToPaymentSchedule() {
		// Given
		PaymentScheduleEntity paymentScheduleEntity = new PaymentScheduleEntity();
		paymentScheduleEntity.setNextPaymentDue(mockValues.nextDate());
		paymentScheduleEntity.setBalanceDue(mockValues.nextDouble());
		paymentScheduleEntity.setAutoPayment(mockValues.nextByte());
		paymentScheduleEntity.setAccount(new AccountEntity());
		paymentScheduleEntity.getAccount().setId(mockValues.nextInteger());
		
		// When
		PaymentSchedule paymentSchedule = paymentScheduleServiceMapper.mapPaymentScheduleEntityToPaymentSchedule(paymentScheduleEntity);
		
		// Then
		assertEquals(paymentScheduleEntity.getNextPaymentDue(), paymentSchedule.getNextPaymentDue());
		assertEquals(paymentScheduleEntity.getBalanceDue(), paymentSchedule.getBalanceDue());
		assertEquals(paymentScheduleEntity.getAutoPayment(), paymentSchedule.getAutoPayment());
		assertEquals(paymentScheduleEntity.getAccount().getId(), paymentSchedule.getAccountId());
	}
	
	/**
	 * Test : Mapping from 'PaymentSchedule' to 'PaymentScheduleEntity'
	 */
	@Test
	public void testMapPaymentScheduleToPaymentScheduleEntity() {
		// Given
		PaymentSchedule paymentSchedule = new PaymentSchedule();
		paymentSchedule.setNextPaymentDue(mockValues.nextDate());
		paymentSchedule.setBalanceDue(mockValues.nextDouble());
		paymentSchedule.setAutoPayment(mockValues.nextByte());
		paymentSchedule.setAccountId(mockValues.nextInteger());

		PaymentScheduleEntity paymentScheduleEntity = new PaymentScheduleEntity();
		
		// When
		paymentScheduleServiceMapper.mapPaymentScheduleToPaymentScheduleEntity(paymentSchedule, paymentScheduleEntity);
		
		// Then
		assertEquals(paymentSchedule.getNextPaymentDue(), paymentScheduleEntity.getNextPaymentDue());
		assertEquals(paymentSchedule.getBalanceDue(), paymentScheduleEntity.getBalanceDue());
		assertEquals(paymentSchedule.getAutoPayment(), paymentScheduleEntity.getAutoPayment());
		assertEquals(paymentSchedule.getAccountId(), paymentScheduleEntity.getAccount().getId());
	}

}