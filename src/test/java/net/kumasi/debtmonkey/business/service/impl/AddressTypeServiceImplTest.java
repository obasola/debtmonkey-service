/*
 * Created on 17 Feb 2017 ( Time 16:36:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.debtmonkey.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import net.kumasi.debtmonkey.domain.AddressType;
import net.kumasi.debtmonkey.domain.jpa.AddressTypeEntity;
import java.util.List;
import net.kumasi.debtmonkey.business.service.mapping.AddressTypeServiceMapper;
import net.kumasi.debtmonkey.persistence.services.jpa.AddressTypePersistenceJPA;
import net.kumasi.debtmonkey.test.AddressTypeFactoryForTest;
import net.kumasi.debtmonkey.test.AddressTypeEntityFactoryForTest;
import net.kumasi.debtmonkey.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of AddressTypeService
 */
@RunWith(MockitoJUnitRunner.class)
public class AddressTypeServiceImplTest {

	@InjectMocks
	private AddressTypeServiceImpl addressTypeService;
	@Mock
	private AddressTypePersistenceJPA addressTypePersistenceJPA;
	@Mock
	private AddressTypeServiceMapper addressTypeServiceMapper;
	
	private AddressTypeFactoryForTest addressTypeFactoryForTest = new AddressTypeFactoryForTest();

	private AddressTypeEntityFactoryForTest addressTypeEntityFactoryForTest = new AddressTypeEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		AddressTypeEntity addressTypeEntity = addressTypePersistenceJPA.load(id);
		
		AddressType addressType = addressTypeFactoryForTest.newAddressType();
		when(addressTypeServiceMapper.mapAddressTypeEntityToAddressType(addressTypeEntity)).thenReturn(addressType);

		// When
		AddressType addressTypeFound = addressTypeService.findById(id);

		// Then
		assertEquals(addressType.getId(),addressTypeFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<AddressTypeEntity> addressTypeEntitys = new ArrayList<AddressTypeEntity>();
		AddressTypeEntity addressTypeEntity1 = addressTypeEntityFactoryForTest.newAddressTypeEntity();
		addressTypeEntitys.add(addressTypeEntity1);
		AddressTypeEntity addressTypeEntity2 = addressTypeEntityFactoryForTest.newAddressTypeEntity();
		addressTypeEntitys.add(addressTypeEntity2);
		when(addressTypePersistenceJPA.loadAll()).thenReturn(addressTypeEntitys);
		
		AddressType addressType1 = addressTypeFactoryForTest.newAddressType();
		when(addressTypeServiceMapper.mapAddressTypeEntityToAddressType(addressTypeEntity1)).thenReturn(addressType1);
		AddressType addressType2 = addressTypeFactoryForTest.newAddressType();
		when(addressTypeServiceMapper.mapAddressTypeEntityToAddressType(addressTypeEntity2)).thenReturn(addressType2);

		// When
		List<AddressType> addressTypesFounds = addressTypeService.findAll();

		// Then
		assertTrue(addressType1 == addressTypesFounds.get(0));
		assertTrue(addressType2 == addressTypesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		AddressType addressType = addressTypeFactoryForTest.newAddressType();

		AddressTypeEntity addressTypeEntity = addressTypeEntityFactoryForTest.newAddressTypeEntity();
		when(addressTypePersistenceJPA.load(addressType.getId())).thenReturn(null);
		
		addressTypeEntity = new AddressTypeEntity();
		addressTypeServiceMapper.mapAddressTypeToAddressTypeEntity(addressType, addressTypeEntity);
		AddressTypeEntity addressTypeEntitySaved = addressTypePersistenceJPA.save(addressTypeEntity);
		
		AddressType addressTypeSaved = addressTypeFactoryForTest.newAddressType();
		when(addressTypeServiceMapper.mapAddressTypeEntityToAddressType(addressTypeEntitySaved)).thenReturn(addressTypeSaved);

		// When
		AddressType addressTypeResult = addressTypeService.create(addressType);

		// Then
		assertTrue(addressTypeResult == addressTypeSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		AddressType addressType = addressTypeFactoryForTest.newAddressType();

		AddressTypeEntity addressTypeEntity = addressTypeEntityFactoryForTest.newAddressTypeEntity();
		when(addressTypePersistenceJPA.load(addressType.getId())).thenReturn(addressTypeEntity);

		// When
		Exception exception = null;
		try {
			addressTypeService.create(addressType);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		AddressType addressType = addressTypeFactoryForTest.newAddressType();

		AddressTypeEntity addressTypeEntity = addressTypeEntityFactoryForTest.newAddressTypeEntity();
		when(addressTypePersistenceJPA.load(addressType.getId())).thenReturn(addressTypeEntity);
		
		AddressTypeEntity addressTypeEntitySaved = addressTypeEntityFactoryForTest.newAddressTypeEntity();
		when(addressTypePersistenceJPA.save(addressTypeEntity)).thenReturn(addressTypeEntitySaved);
		
		AddressType addressTypeSaved = addressTypeFactoryForTest.newAddressType();
		when(addressTypeServiceMapper.mapAddressTypeEntityToAddressType(addressTypeEntitySaved)).thenReturn(addressTypeSaved);

		// When
		AddressType addressTypeResult = addressTypeService.update(addressType);

		// Then
		verify(addressTypeServiceMapper).mapAddressTypeToAddressTypeEntity(addressType, addressTypeEntity);
		assertTrue(addressTypeResult == addressTypeSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		addressTypeService.delete(id);

		// Then
		verify(addressTypePersistenceJPA).delete(id);
		
	}

}
