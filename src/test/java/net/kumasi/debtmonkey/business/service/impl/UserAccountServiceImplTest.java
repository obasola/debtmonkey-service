/*
 * Created on 17 Feb 2017 ( Time 16:36:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.debtmonkey.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import net.kumasi.debtmonkey.domain.UserAccount;
import net.kumasi.debtmonkey.domain.jpa.UserAccountEntity;
import java.util.List;
import net.kumasi.debtmonkey.business.service.mapping.UserAccountServiceMapper;
import net.kumasi.debtmonkey.persistence.services.jpa.UserAccountPersistenceJPA;
import net.kumasi.debtmonkey.test.UserAccountFactoryForTest;
import net.kumasi.debtmonkey.test.UserAccountEntityFactoryForTest;
import net.kumasi.debtmonkey.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of UserAccountService
 */
@RunWith(MockitoJUnitRunner.class)
public class UserAccountServiceImplTest {

	@InjectMocks
	private UserAccountServiceImpl userAccountService;
	@Mock
	private UserAccountPersistenceJPA userAccountPersistenceJPA;
	@Mock
	private UserAccountServiceMapper userAccountServiceMapper;
	
	private UserAccountFactoryForTest userAccountFactoryForTest = new UserAccountFactoryForTest();

	private UserAccountEntityFactoryForTest userAccountEntityFactoryForTest = new UserAccountEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		UserAccountEntity userAccountEntity = userAccountPersistenceJPA.load(id);
		
		UserAccount userAccount = userAccountFactoryForTest.newUserAccount();
		when(userAccountServiceMapper.mapUserAccountEntityToUserAccount(userAccountEntity)).thenReturn(userAccount);

		// When
		UserAccount userAccountFound = userAccountService.findById(id);

		// Then
		assertEquals(userAccount.getId(),userAccountFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<UserAccountEntity> userAccountEntitys = new ArrayList<UserAccountEntity>();
		UserAccountEntity userAccountEntity1 = userAccountEntityFactoryForTest.newUserAccountEntity();
		userAccountEntitys.add(userAccountEntity1);
		UserAccountEntity userAccountEntity2 = userAccountEntityFactoryForTest.newUserAccountEntity();
		userAccountEntitys.add(userAccountEntity2);
		when(userAccountPersistenceJPA.loadAll()).thenReturn(userAccountEntitys);
		
		UserAccount userAccount1 = userAccountFactoryForTest.newUserAccount();
		when(userAccountServiceMapper.mapUserAccountEntityToUserAccount(userAccountEntity1)).thenReturn(userAccount1);
		UserAccount userAccount2 = userAccountFactoryForTest.newUserAccount();
		when(userAccountServiceMapper.mapUserAccountEntityToUserAccount(userAccountEntity2)).thenReturn(userAccount2);

		// When
		List<UserAccount> userAccountsFounds = userAccountService.findAll();

		// Then
		assertTrue(userAccount1 == userAccountsFounds.get(0));
		assertTrue(userAccount2 == userAccountsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		UserAccount userAccount = userAccountFactoryForTest.newUserAccount();

		UserAccountEntity userAccountEntity = userAccountEntityFactoryForTest.newUserAccountEntity();
		when(userAccountPersistenceJPA.load(userAccount.getId())).thenReturn(null);
		
		userAccountEntity = new UserAccountEntity();
		userAccountServiceMapper.mapUserAccountToUserAccountEntity(userAccount, userAccountEntity);
		UserAccountEntity userAccountEntitySaved = userAccountPersistenceJPA.save(userAccountEntity);
		
		UserAccount userAccountSaved = userAccountFactoryForTest.newUserAccount();
		when(userAccountServiceMapper.mapUserAccountEntityToUserAccount(userAccountEntitySaved)).thenReturn(userAccountSaved);

		// When
		UserAccount userAccountResult = userAccountService.create(userAccount);

		// Then
		assertTrue(userAccountResult == userAccountSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		UserAccount userAccount = userAccountFactoryForTest.newUserAccount();

		UserAccountEntity userAccountEntity = userAccountEntityFactoryForTest.newUserAccountEntity();
		when(userAccountPersistenceJPA.load(userAccount.getId())).thenReturn(userAccountEntity);

		// When
		Exception exception = null;
		try {
			userAccountService.create(userAccount);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		UserAccount userAccount = userAccountFactoryForTest.newUserAccount();

		UserAccountEntity userAccountEntity = userAccountEntityFactoryForTest.newUserAccountEntity();
		when(userAccountPersistenceJPA.load(userAccount.getId())).thenReturn(userAccountEntity);
		
		UserAccountEntity userAccountEntitySaved = userAccountEntityFactoryForTest.newUserAccountEntity();
		when(userAccountPersistenceJPA.save(userAccountEntity)).thenReturn(userAccountEntitySaved);
		
		UserAccount userAccountSaved = userAccountFactoryForTest.newUserAccount();
		when(userAccountServiceMapper.mapUserAccountEntityToUserAccount(userAccountEntitySaved)).thenReturn(userAccountSaved);

		// When
		UserAccount userAccountResult = userAccountService.update(userAccount);

		// Then
		verify(userAccountServiceMapper).mapUserAccountToUserAccountEntity(userAccount, userAccountEntity);
		assertTrue(userAccountResult == userAccountSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		userAccountService.delete(id);

		// Then
		verify(userAccountPersistenceJPA).delete(id);
		
	}

}
