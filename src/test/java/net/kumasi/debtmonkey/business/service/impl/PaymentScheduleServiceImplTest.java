/*
 * Created on 17 Feb 2017 ( Time 16:36:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.debtmonkey.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import net.kumasi.debtmonkey.domain.PaymentSchedule;
import net.kumasi.debtmonkey.domain.jpa.PaymentScheduleEntity;
import java.util.Date;
import net.kumasi.debtmonkey.business.service.mapping.PaymentScheduleServiceMapper;
import net.kumasi.debtmonkey.persistence.services.jpa.PaymentSchedulePersistenceJPA;
import net.kumasi.debtmonkey.test.PaymentScheduleFactoryForTest;
import net.kumasi.debtmonkey.test.PaymentScheduleEntityFactoryForTest;
import net.kumasi.debtmonkey.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of PaymentScheduleService
 */
@RunWith(MockitoJUnitRunner.class)
public class PaymentScheduleServiceImplTest {

	@InjectMocks
	private PaymentScheduleServiceImpl paymentScheduleService;
	@Mock
	private PaymentSchedulePersistenceJPA paymentSchedulePersistenceJPA;
	@Mock
	private PaymentScheduleServiceMapper paymentScheduleServiceMapper;
	
	private PaymentScheduleFactoryForTest paymentScheduleFactoryForTest = new PaymentScheduleFactoryForTest();

	private PaymentScheduleEntityFactoryForTest paymentScheduleEntityFactoryForTest = new PaymentScheduleEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		PaymentScheduleEntity paymentScheduleEntity = paymentSchedulePersistenceJPA.load(id);
		
		PaymentSchedule paymentSchedule = paymentScheduleFactoryForTest.newPaymentSchedule();
		when(paymentScheduleServiceMapper.mapPaymentScheduleEntityToPaymentSchedule(paymentScheduleEntity)).thenReturn(paymentSchedule);

		// When
		PaymentSchedule paymentScheduleFound = paymentScheduleService.findById(id);

		// Then
		assertEquals(paymentSchedule.getId(),paymentScheduleFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<PaymentScheduleEntity> paymentScheduleEntitys = new ArrayList<PaymentScheduleEntity>();
		PaymentScheduleEntity paymentScheduleEntity1 = paymentScheduleEntityFactoryForTest.newPaymentScheduleEntity();
		paymentScheduleEntitys.add(paymentScheduleEntity1);
		PaymentScheduleEntity paymentScheduleEntity2 = paymentScheduleEntityFactoryForTest.newPaymentScheduleEntity();
		paymentScheduleEntitys.add(paymentScheduleEntity2);
		when(paymentSchedulePersistenceJPA.loadAll()).thenReturn(paymentScheduleEntitys);
		
		PaymentSchedule paymentSchedule1 = paymentScheduleFactoryForTest.newPaymentSchedule();
		when(paymentScheduleServiceMapper.mapPaymentScheduleEntityToPaymentSchedule(paymentScheduleEntity1)).thenReturn(paymentSchedule1);
		PaymentSchedule paymentSchedule2 = paymentScheduleFactoryForTest.newPaymentSchedule();
		when(paymentScheduleServiceMapper.mapPaymentScheduleEntityToPaymentSchedule(paymentScheduleEntity2)).thenReturn(paymentSchedule2);

		// When
		List<PaymentSchedule> paymentSchedulesFounds = paymentScheduleService.findAll();

		// Then
		assertTrue(paymentSchedule1 == paymentSchedulesFounds.get(0));
		assertTrue(paymentSchedule2 == paymentSchedulesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		PaymentSchedule paymentSchedule = paymentScheduleFactoryForTest.newPaymentSchedule();

		PaymentScheduleEntity paymentScheduleEntity = paymentScheduleEntityFactoryForTest.newPaymentScheduleEntity();
		when(paymentSchedulePersistenceJPA.load(paymentSchedule.getId())).thenReturn(null);
		
		paymentScheduleEntity = new PaymentScheduleEntity();
		paymentScheduleServiceMapper.mapPaymentScheduleToPaymentScheduleEntity(paymentSchedule, paymentScheduleEntity);
		PaymentScheduleEntity paymentScheduleEntitySaved = paymentSchedulePersistenceJPA.save(paymentScheduleEntity);
		
		PaymentSchedule paymentScheduleSaved = paymentScheduleFactoryForTest.newPaymentSchedule();
		when(paymentScheduleServiceMapper.mapPaymentScheduleEntityToPaymentSchedule(paymentScheduleEntitySaved)).thenReturn(paymentScheduleSaved);

		// When
		PaymentSchedule paymentScheduleResult = paymentScheduleService.create(paymentSchedule);

		// Then
		assertTrue(paymentScheduleResult == paymentScheduleSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		PaymentSchedule paymentSchedule = paymentScheduleFactoryForTest.newPaymentSchedule();

		PaymentScheduleEntity paymentScheduleEntity = paymentScheduleEntityFactoryForTest.newPaymentScheduleEntity();
		when(paymentSchedulePersistenceJPA.load(paymentSchedule.getId())).thenReturn(paymentScheduleEntity);

		// When
		Exception exception = null;
		try {
			paymentScheduleService.create(paymentSchedule);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		PaymentSchedule paymentSchedule = paymentScheduleFactoryForTest.newPaymentSchedule();

		PaymentScheduleEntity paymentScheduleEntity = paymentScheduleEntityFactoryForTest.newPaymentScheduleEntity();
		when(paymentSchedulePersistenceJPA.load(paymentSchedule.getId())).thenReturn(paymentScheduleEntity);
		
		PaymentScheduleEntity paymentScheduleEntitySaved = paymentScheduleEntityFactoryForTest.newPaymentScheduleEntity();
		when(paymentSchedulePersistenceJPA.save(paymentScheduleEntity)).thenReturn(paymentScheduleEntitySaved);
		
		PaymentSchedule paymentScheduleSaved = paymentScheduleFactoryForTest.newPaymentSchedule();
		when(paymentScheduleServiceMapper.mapPaymentScheduleEntityToPaymentSchedule(paymentScheduleEntitySaved)).thenReturn(paymentScheduleSaved);

		// When
		PaymentSchedule paymentScheduleResult = paymentScheduleService.update(paymentSchedule);

		// Then
		verify(paymentScheduleServiceMapper).mapPaymentScheduleToPaymentScheduleEntity(paymentSchedule, paymentScheduleEntity);
		assertTrue(paymentScheduleResult == paymentScheduleSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		paymentScheduleService.delete(id);

		// Then
		verify(paymentSchedulePersistenceJPA).delete(id);
		
	}

}
