/*
 * Created on 17 Feb 2017 ( Time 16:36:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.debtmonkey.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import net.kumasi.debtmonkey.domain.Role;
import net.kumasi.debtmonkey.domain.jpa.RoleEntity;
import java.util.List;
import net.kumasi.debtmonkey.business.service.mapping.RoleServiceMapper;
import net.kumasi.debtmonkey.persistence.services.jpa.RolePersistenceJPA;
import net.kumasi.debtmonkey.test.RoleFactoryForTest;
import net.kumasi.debtmonkey.test.RoleEntityFactoryForTest;
import net.kumasi.debtmonkey.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of RoleService
 */
@RunWith(MockitoJUnitRunner.class)
public class RoleServiceImplTest {

	@InjectMocks
	private RoleServiceImpl roleService;
	@Mock
	private RolePersistenceJPA rolePersistenceJPA;
	@Mock
	private RoleServiceMapper roleServiceMapper;
	
	private RoleFactoryForTest roleFactoryForTest = new RoleFactoryForTest();

	private RoleEntityFactoryForTest roleEntityFactoryForTest = new RoleEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer roleId = mockValues.nextInteger();
		
		RoleEntity roleEntity = rolePersistenceJPA.load(roleId);
		
		Role role = roleFactoryForTest.newRole();
		when(roleServiceMapper.mapRoleEntityToRole(roleEntity)).thenReturn(role);

		// When
		Role roleFound = roleService.findById(roleId);

		// Then
		assertEquals(role.getRoleId(),roleFound.getRoleId());
	}

	@Test
	public void findAll() {
		// Given
		List<RoleEntity> roleEntitys = new ArrayList<RoleEntity>();
		RoleEntity roleEntity1 = roleEntityFactoryForTest.newRoleEntity();
		roleEntitys.add(roleEntity1);
		RoleEntity roleEntity2 = roleEntityFactoryForTest.newRoleEntity();
		roleEntitys.add(roleEntity2);
		when(rolePersistenceJPA.loadAll()).thenReturn(roleEntitys);
		
		Role role1 = roleFactoryForTest.newRole();
		when(roleServiceMapper.mapRoleEntityToRole(roleEntity1)).thenReturn(role1);
		Role role2 = roleFactoryForTest.newRole();
		when(roleServiceMapper.mapRoleEntityToRole(roleEntity2)).thenReturn(role2);

		// When
		List<Role> rolesFounds = roleService.findAll();

		// Then
		assertTrue(role1 == rolesFounds.get(0));
		assertTrue(role2 == rolesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Role role = roleFactoryForTest.newRole();

		RoleEntity roleEntity = roleEntityFactoryForTest.newRoleEntity();
		when(rolePersistenceJPA.load(role.getRoleId())).thenReturn(null);
		
		roleEntity = new RoleEntity();
		roleServiceMapper.mapRoleToRoleEntity(role, roleEntity);
		RoleEntity roleEntitySaved = rolePersistenceJPA.save(roleEntity);
		
		Role roleSaved = roleFactoryForTest.newRole();
		when(roleServiceMapper.mapRoleEntityToRole(roleEntitySaved)).thenReturn(roleSaved);

		// When
		Role roleResult = roleService.create(role);

		// Then
		assertTrue(roleResult == roleSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Role role = roleFactoryForTest.newRole();

		RoleEntity roleEntity = roleEntityFactoryForTest.newRoleEntity();
		when(rolePersistenceJPA.load(role.getRoleId())).thenReturn(roleEntity);

		// When
		Exception exception = null;
		try {
			roleService.create(role);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Role role = roleFactoryForTest.newRole();

		RoleEntity roleEntity = roleEntityFactoryForTest.newRoleEntity();
		when(rolePersistenceJPA.load(role.getRoleId())).thenReturn(roleEntity);
		
		RoleEntity roleEntitySaved = roleEntityFactoryForTest.newRoleEntity();
		when(rolePersistenceJPA.save(roleEntity)).thenReturn(roleEntitySaved);
		
		Role roleSaved = roleFactoryForTest.newRole();
		when(roleServiceMapper.mapRoleEntityToRole(roleEntitySaved)).thenReturn(roleSaved);

		// When
		Role roleResult = roleService.update(role);

		// Then
		verify(roleServiceMapper).mapRoleToRoleEntity(role, roleEntity);
		assertTrue(roleResult == roleSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer roleId = mockValues.nextInteger();

		// When
		roleService.delete(roleId);

		// Then
		verify(rolePersistenceJPA).delete(roleId);
		
	}

}
