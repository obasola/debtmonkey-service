/*
 * Created on 17 Feb 2017 ( Time 16:36:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.debtmonkey.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import net.kumasi.debtmonkey.domain.Role;
import net.kumasi.debtmonkey.domain.jpa.RoleEntity;
import java.util.List;
import net.kumasi.debtmonkey.business.service.RoleService;
import net.kumasi.debtmonkey.business.service.mapping.RoleServiceMapper;
import net.kumasi.debtmonkey.persistence.PersistenceServiceProvider;
import net.kumasi.debtmonkey.persistence.services.RolePersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of RoleService
 */
@Component
public class RoleServiceImpl implements RoleService {

	private RolePersistence rolePersistence;

	@Resource
	private RoleServiceMapper roleServiceMapper;
	
	public RoleServiceImpl() {
		rolePersistence = PersistenceServiceProvider.getService(RolePersistence.class);
	}
		
	@Override
	public Role findById(Integer roleId) {
		RoleEntity entity = rolePersistence.load(roleId);
		return roleServiceMapper.mapRoleEntityToRole(entity);
	}

	@Override
	public List<Role> findAll() {
		List<RoleEntity> entities = rolePersistence.loadAll();
		List<Role> beans = new ArrayList<Role>();
		for(RoleEntity entity : entities) {
			beans.add(roleServiceMapper.mapRoleEntityToRole(entity));
		}
		return beans;
	}

	@Override
	public Role save(Role role) {
		return update(role) ;
	}

	@Override
	public Role create(Role role) {
		if(rolePersistence.load(role.getRoleId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		RoleEntity roleEntity = new RoleEntity();
		roleServiceMapper.mapRoleToRoleEntity(role, roleEntity);
		RoleEntity roleEntitySaved = rolePersistence.save(roleEntity);
		return roleServiceMapper.mapRoleEntityToRole(roleEntitySaved);
	}

	@Override
	public Role update(Role role) {
		RoleEntity roleEntity = rolePersistence.load(role.getRoleId());
		roleServiceMapper.mapRoleToRoleEntity(role, roleEntity);
		RoleEntity roleEntitySaved = rolePersistence.save(roleEntity);
		return roleServiceMapper.mapRoleEntityToRole(roleEntitySaved);
	}

	@Override
	public void delete(Integer roleId) {
		rolePersistence.delete(roleId);
	}

	public RolePersistence getRolePersistence() {
		return rolePersistence;
	}

	public void setRolePersistence(RolePersistence rolePersistence) {
		this.rolePersistence = rolePersistence;
	}

	public RoleServiceMapper getRoleServiceMapper() {
		return roleServiceMapper;
	}

	public void setRoleServiceMapper(RoleServiceMapper roleServiceMapper) {
		this.roleServiceMapper = roleServiceMapper;
	}

}
