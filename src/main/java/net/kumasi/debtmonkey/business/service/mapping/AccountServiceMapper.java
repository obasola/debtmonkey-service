/*
 * Created on 17 Feb 2017 ( Time 16:36:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.debtmonkey.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;

import net.kumasi.debtmonkey.domain.Account;
import net.kumasi.debtmonkey.domain.AccountAddress;
import net.kumasi.debtmonkey.domain.jpa.AccountAddressEntity;
import net.kumasi.debtmonkey.domain.jpa.AccountEntity;
import net.kumasi.debtmonkey.domain.jpa.AccountTypeEntity;
import net.kumasi.debtmonkey.domain.jpa.UserAccountEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class AccountServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public AccountServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'AccountEntity' to 'Account'
	 * @param accountEntity
	 */
	public Account mapAccountEntityToAccount(AccountEntity accountEntity) {
		if(accountEntity == null) {
			return null;
		}

		//--- Generic mapping 
		Account account = map(accountEntity, Account.class);

		//--- Link mapping ( link to AccountAddress )
		if(accountEntity.getAccountAddress() != null) {
			AccountAddress acctAddress = map(accountEntity.getAccountAddress(), AccountAddress.class);
			account.setAccountAddress(acctAddress);
		}
		//--- Link mapping ( link to UserAccount )
		if(accountEntity.getUserAccount() != null) {
			account.setUserAccountId(accountEntity.getUserAccount().getId());
		}
		//--- Link mapping ( link to AccountType )
		if(accountEntity.getAccountType() != null) {
			account.setAccountTypeId(accountEntity.getAccountType().getId());
		}
		return account;
	}
	
	/**
	 * Mapping from 'Account' to 'AccountEntity'
	 * @param account
	 * @param accountEntity
	 */
	public void mapAccountToAccountEntity(Account account, AccountEntity accountEntity) {
		if(account == null) {
			return;
		}

		//--- Generic mapping 
		map(account, accountEntity);

		//--- Link mapping ( link : account )
		if( hasLinkToAccountAddress(account) ) {
			AccountAddressEntity accountAddress1 = new AccountAddressEntity();
			accountAddress1.setId( account.getAccountAddress().getId() );
			accountEntity.setAccountAddress( accountAddress1 );
		} else {
			accountEntity.setAccountAddress( null );
		}

		//--- Link mapping ( link : account )
		if( hasLinkToUserAccount(account) ) {
			UserAccountEntity userAccount2 = new UserAccountEntity();
			userAccount2.setId( account.getUserAccountId() );
			accountEntity.setUserAccount( userAccount2 );
		} else {
			accountEntity.setUserAccount( null );
		}

		//--- Link mapping ( link : account )
		if( hasLinkToAccountType(account) ) {
			AccountTypeEntity accountType3 = new AccountTypeEntity();
			accountType3.setId( account.getAccountTypeId() );
			accountEntity.setAccountType( accountType3 );
		} else {
			accountEntity.setAccountType( null );
		}

	}
	
	/**
	 * Verify that AccountAddress id is valid.
	 * @param AccountAddress AccountAddress
	 * @return boolean
	 */
	private boolean hasLinkToAccountAddress(Account account) {
		if(account.getAccountAddress() != null && account.getAccountAddress().getId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that UserAccount id is valid.
	 * @param UserAccount UserAccount
	 * @return boolean
	 */
	private boolean hasLinkToUserAccount(Account account) {
		if(account.getUserAccountId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that AccountType id is valid.
	 * @param AccountType AccountType
	 * @return boolean
	 */
	private boolean hasLinkToAccountType(Account account) {
		if(account.getAccountTypeId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}