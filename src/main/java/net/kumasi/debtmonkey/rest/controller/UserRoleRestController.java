/*
 * Created on 17 Feb 2017 ( Time 16:36:37 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.debtmonkey.rest.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import net.kumasi.debtmonkey.domain.UserRole;
import net.kumasi.debtmonkey.business.service.UserRoleService;
import net.kumasi.debtmonkey.web.listitem.UserRoleListItem;

/**
 * Spring MVC controller for 'UserRole' management.
 */
@Controller
public class UserRoleRestController {

	@Resource
	private UserRoleService userRoleService;
	
	@RequestMapping( value="/items/userRole",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<UserRoleListItem> findAllAsListItems() {
		List<UserRole> list = userRoleService.findAll();
		List<UserRoleListItem> items = new LinkedList<UserRoleListItem>();
		for ( UserRole userRole : list ) {
			items.add(new UserRoleListItem( userRole ) );
		}
		return items;
	}
	
	@RequestMapping( value="/userRole",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<UserRole> findAll() {
		return userRoleService.findAll();
	}

	@RequestMapping( value="/userRole/{userAccountId}/{roleRoleId}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public UserRole findOne(@PathVariable("userAccountId") Integer userAccountId, @PathVariable("roleRoleId") Integer roleRoleId) {
		return userRoleService.findById(userAccountId, roleRoleId);
	}
	
	@RequestMapping( value="/userRole",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public UserRole create(@RequestBody UserRole userRole) {
		return userRoleService.create(userRole);
	}

	@RequestMapping( value="/userRole/{userAccountId}/{roleRoleId}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public UserRole update(@PathVariable("userAccountId") Integer userAccountId, @PathVariable("roleRoleId") Integer roleRoleId, @RequestBody UserRole userRole) {
		return userRoleService.update(userRole);
	}

	@RequestMapping( value="/userRole/{userAccountId}/{roleRoleId}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("userAccountId") Integer userAccountId, @PathVariable("roleRoleId") Integer roleRoleId) {
		userRoleService.delete(userAccountId, roleRoleId);
	}
	
}
