/*
 * Created on 23 Nov 2016 ( Time 14:35:28 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.debtmonkey.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.kumasi.debtmonkey.model.PaymentHistory;
import com.kumasi.debtmonkey.model.jpa.PaymentHistoryEntity;
import com.kumasi.debtmonkey.business.service.PaymentHistoryService;
import com.kumasi.debtmonkey.business.service.mapping.PaymentHistoryServiceMapper;
import com.kumasi.debtmonkey.persistence.PersistenceServiceProvider;
import com.kumasi.debtmonkey.persistence.services.PaymentHistoryPersistence;
import java.util.HashMap;
import java.util.Map;

import org.jboss.logging.Logger;
import org.springframework.stereotype.Component;

/**
 * Implementation of PaymentHistoryService
 */
@Component
public class PaymentHistoryServiceImpl implements PaymentHistoryService {
	Logger logger = Logger.getLogger(PaymentHistoryServiceImpl.class);
    private PaymentHistoryPersistence paymentHistoryPersistence;

    @Resource
    private PaymentHistoryServiceMapper paymentHistoryServiceMapper;

    public PaymentHistoryServiceImpl() {
        paymentHistoryPersistence = PersistenceServiceProvider.getService(PaymentHistoryPersistence.class);
    }

    @Override
    public PaymentHistory findById(Integer idpaymentHistory) {
        PaymentHistoryEntity entity = paymentHistoryPersistence.load(idpaymentHistory);
        return paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(entity);
    }

    @Override
    public List<PaymentHistory> findAll() {
        List<PaymentHistoryEntity> entities = paymentHistoryPersistence.loadAll();
        List<PaymentHistory> beans = new ArrayList<PaymentHistory>();
        for (PaymentHistoryEntity entity : entities) {
            beans.add(paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(entity));
        }
        return beans;
    }
    
    @Override
    public List<PaymentHistory> findAllByAccountId(Integer accountId) {
    	logger.debug("AcctID: "+accountId);
        Map<String,Object> map = new HashMap<String,Object>();
        map.put("id", accountId);
        List<PaymentHistoryEntity> entities = paymentHistoryPersistence.loadByNamedQuery("PaymentHistoryEntity.findAllByAccount",map);
        List<PaymentHistory> beans = new ArrayList<PaymentHistory>();
        for (PaymentHistoryEntity entity : entities) {
            beans.add(paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(entity));
        }
        logger.debug("rows found = "+beans.size());
        return beans;
    }
    
    @Override
    public PaymentHistory save(PaymentHistory paymentHistory) {
        return update(paymentHistory);
    }

    @Override
    public PaymentHistory create(PaymentHistory paymentHistory) {
        if(paymentHistory.getIdpaymentHistory() != null) {
            if (paymentHistoryPersistence.load(paymentHistory.getIdpaymentHistory()) != null) {
                throw new IllegalStateException("already.exists");
            }
        }
        PaymentHistoryEntity paymentHistoryEntity = new PaymentHistoryEntity();
        paymentHistoryServiceMapper.mapPaymentHistoryToPaymentHistoryEntity(paymentHistory, paymentHistoryEntity);
        PaymentHistoryEntity paymentHistoryEntitySaved = paymentHistoryPersistence.save(paymentHistoryEntity);
        return paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(paymentHistoryEntitySaved);
    }

    @Override
    public PaymentHistory update(PaymentHistory paymentHistory) {
        PaymentHistoryEntity paymentHistoryEntity = paymentHistoryPersistence.load(paymentHistory.getIdpaymentHistory());
        paymentHistoryServiceMapper.mapPaymentHistoryToPaymentHistoryEntity(paymentHistory, paymentHistoryEntity);
        PaymentHistoryEntity paymentHistoryEntitySaved = paymentHistoryPersistence.save(paymentHistoryEntity);
        return paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(paymentHistoryEntitySaved);
    }

    @Override
    public void delete(Integer idpaymentHistory) {
        paymentHistoryPersistence.delete(idpaymentHistory);
    }

    public PaymentHistoryPersistence getPaymentHistoryPersistence() {
        return paymentHistoryPersistence;
    }

    public void setPaymentHistoryPersistence(PaymentHistoryPersistence paymentHistoryPersistence) {
        this.paymentHistoryPersistence = paymentHistoryPersistence;
    }

    public PaymentHistoryServiceMapper getPaymentHistoryServiceMapper() {
        return paymentHistoryServiceMapper;
    }

    public void setPaymentHistoryServiceMapper(PaymentHistoryServiceMapper paymentHistoryServiceMapper) {
        this.paymentHistoryServiceMapper = paymentHistoryServiceMapper;
    }

}
