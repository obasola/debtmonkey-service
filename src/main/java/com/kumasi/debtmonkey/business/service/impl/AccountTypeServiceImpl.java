/*
 * Created on 6 Sep 2016 ( Time 17:16:43 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.debtmonkey.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.debtmonkey.model.AccountType;
import com.kumasi.debtmonkey.model.jpa.AccountTypeEntity;
import java.util.List;
import com.kumasi.debtmonkey.business.service.AccountTypeService;
import com.kumasi.debtmonkey.business.service.mapping.AccountTypeServiceMapper;
import com.kumasi.debtmonkey.persistence.PersistenceServiceProvider;
import com.kumasi.debtmonkey.persistence.services.AccountTypePersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of AccountTypeService
 */
@Component
public class AccountTypeServiceImpl implements AccountTypeService {

	private AccountTypePersistence accountTypePersistence;

	@Resource
	private AccountTypeServiceMapper accountTypeServiceMapper;
	
	public AccountTypeServiceImpl() {
		accountTypePersistence = PersistenceServiceProvider.getService(AccountTypePersistence.class);
	}
		
	@Override
	public AccountType findById(Integer id) {
		AccountTypeEntity entity = accountTypePersistence.load(id);
		return accountTypeServiceMapper.mapAccountTypeEntityToAccountType(entity);
	}

	@Override
	public List<AccountType> findAll() {
		List<AccountTypeEntity> entities = accountTypePersistence.loadAll();
		List<AccountType> beans = new ArrayList<AccountType>();
		for(AccountTypeEntity entity : entities) {
			beans.add(accountTypeServiceMapper.mapAccountTypeEntityToAccountType(entity));
		}
		return beans;
	}

	@Override
	public AccountType save(AccountType accountType) {
		return update(accountType) ;
	}

	@Override
	public AccountType create(AccountType accountType) {
		/*
		if(accountTypePersistence.load(accountType.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		*/
		AccountTypeEntity accountTypeEntity = new AccountTypeEntity();
		accountTypeServiceMapper.mapAccountTypeToAccountTypeEntity(accountType, accountTypeEntity);
		AccountTypeEntity accountTypeEntitySaved = accountTypePersistence.save(accountTypeEntity);
		return accountTypeServiceMapper.mapAccountTypeEntityToAccountType(accountTypeEntitySaved);
	}

	@Override
	public AccountType update(AccountType accountType) {
		AccountTypeEntity accountTypeEntity = accountTypePersistence.load(accountType.getId());
		accountTypeServiceMapper.mapAccountTypeToAccountTypeEntity(accountType, accountTypeEntity);
		AccountTypeEntity accountTypeEntitySaved = accountTypePersistence.save(accountTypeEntity);
		return accountTypeServiceMapper.mapAccountTypeEntityToAccountType(accountTypeEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		accountTypePersistence.delete(id);
	}

	public AccountTypePersistence getAccountTypePersistence() {
		return accountTypePersistence;
	}

	public void setAccountTypePersistence(AccountTypePersistence accountTypePersistence) {
		this.accountTypePersistence = accountTypePersistence;
	}

	public AccountTypeServiceMapper getAccountTypeServiceMapper() {
		return accountTypeServiceMapper;
	}

	public void setAccountTypeServiceMapper(AccountTypeServiceMapper accountTypeServiceMapper) {
		this.accountTypeServiceMapper = accountTypeServiceMapper;
	}

}
